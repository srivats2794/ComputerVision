    /*LAB3: LETTERS*/

#include <stdio.h>
#include <stdlib.h>

main()

{
	FILE *fpt1, *fpt2, *fpt3, *fpt4;
	unsigned char	*image;
	unsigned char	*msf, *clipboard, *temp, *binary, *copy;
	char letter[1262], header[320],header2[320];
	int	 ROWS, COLS, BYTES, i=0;
	int	 ROWS2, COLS2, BYTES2;
	int	 r, c, r2, c2;
	int  edge, neighbor, a, b, e, d, pass, flag, flag2 = 0, T;
	int  end, branch, R, C, count, check, let, sum1, sum2;
	int TP, FP, FN, TN;
	float TPR = 0, FPR = 0;

	/* read original image*/
	if ((fpt2=fopen("parenthood.ppm","rb")) == NULL)
	  {
	  printf("Unable to open image for reading\n");
	  exit(0);
	  }
	fscanf(fpt2,"%s %d %d %d\n",header,&COLS,&ROWS,&BYTES);

	image=(unsigned char *)calloc(ROWS*COLS,sizeof(unsigned char));
	fread(image,1,COLS*ROWS,fpt2);
	fclose(fpt2);

	if ((fpt3 = fopen("parenthood_e_template.ppm", "rb")) == NULL)
	{
		printf("Unable to open parenthood_e_template.ppm for reading\n");
		exit(0);
	}
	fscanf(fpt3, "%s %d %d %d\n", header2, &COLS2, &ROWS2, &BYTES2);
	temp = (unsigned char *)calloc(ROWS2*COLS2, sizeof(unsigned char));
	fread(temp, 1, COLS2*ROWS2, fpt3);
	fclose(fpt3);
fpt4 = fopen("results.txt", "wb");

 for (T = 30; T<= 225;T+ = 15)
{	
	        TP = 0;
		FP = 0;
		FN = 0;
		TN = 0;
		count = 0;
		check = 0;
		let = 0;
		sum1 = 0;
		sum2 = 0;

		/* read normalized MSF image*/
		if ((fpt1 = fopen("nmsf.ppm", "rb")) == NULL)
		{
			printf("Unable to open thre_%d.ppm for reading\n", T);
			exit(0);
		}
		fscanf(fpt1, "%s %d %d %d\n", header, &COLS, &ROWS, &BYTES);
		msf = (unsigned char *)calloc(ROWS*COLS, sizeof(unsigned char));
		fread(msf, 1, COLS*ROWS, fpt1);
		fclose(fpt1);

		/*Opening a dummy image to copy from original image*/
		clipboard = (unsigned char *)calloc(ROWS*COLS, sizeof(unsigned char));

		/*Setting the clipboard image to white*/
		for (r = 0; r < ROWS; r++)
			for (c = 0; c < COLS; c++)
			{
			clipboard[r*COLS + c] = 255;
			}

		/*Copying original image for any pixel greater than threshold*/
		for (r = (ROWS2 / 2); r < ROWS - (ROWS2 / 2) - 1; r++)
			for (c = (COLS2 / 2); c < COLS - (COLS2 / 2) - 1; c++)
			{
			if (msf[r*COLS + c] == 255)
			{
				count += 1;
				for (r2 = -(ROWS2 / 2); r2 < (ROWS2 / 2) + 1; r2++)
					for (c2 = -(COLS2 / 2); c2 < (COLS2 / 2) + 1; c2++)
					{
					clipboard[(r + r2)*COLS + c + c2] = image[(r + r2)*COLS + c + c2];
					}
			}
			}
		fpt1 = fopen("originalcopy.ppm", "wb");
		fprintf(fpt1, "P5 %d %d 255\n", COLS, ROWS);

		for (r = 0; r < ROWS*COLS; r++)
		{
			fprintf(fpt1, "%c", clipboard[r]);
		}
		fclose(fpt1);

		/*Allocating memory for binary image*/
		binary = (unsigned char *)calloc(ROWS*COLS, sizeof(unsigned char));
		copy = (unsigned char *)calloc(ROWS*COLS, sizeof(unsigned char));

		/*Binary conversion with 128 as threshold*/
		for (r = 0; r < ROWS; r++)
			for (c = 0; c < COLS; c++)
			{
			if (clipboard[r*COLS + c] > 128)
			{
				binary[r*COLS + c] = 255;
				copy[r*COLS + c] = 255;
			}
			else
			{
				binary[r*COLS + c] = 0;
				copy[r*COLS + c] = 0;
			}
			}


		fpt1 = fopen("binary.ppm", "wb");
		fprintf(fpt1, "P5 %d %d 255\n", COLS, ROWS); //binary image output

		for (r = 0; r < ROWS*COLS; r++)
		{
			fprintf(fpt1, "%c", binary[r]);
		}
		fclose(fpt1);

		/*Transitions and neighbors*/
		while (1)
		{
			flag = 0;
			for (r = 1; r < ROWS - 1; r++)
				for (c = 1; c < COLS - 1; c++)
				{
				edge = 0;
				neighbor = 0;
				a = 0;
				b = 0;
				e = 0;
				d = 0;
				pass = 0;

				if (binary[r*COLS + (c + 1)] - binary[(r + 1)*COLS + (c + 1)] < 0)
					edge += 1;

				if (binary[(r + 1)*COLS + (c + 1)] - binary[(r + 1)*COLS + c] < 0)
					edge += 1;

				if (binary[(r + 1)*COLS + c] - binary[(r + 1)*COLS + (c - 1)] < 0)
					edge += 1;

				if (binary[(r + 1)*COLS + (c - 1)] - binary[r*COLS + (c - 1)] < 0)
					edge += 1;

				if (binary[r*COLS + (c - 1)] - binary[(r - 1)*COLS + (c - 1)] < 0)
					edge += 1;

				if (binary[(r - 1)*COLS + (c - 1)] - binary[(r - 1)*COLS + c] < 0)
					edge += 1;

				if (binary[(r - 1)*COLS + c] - binary[(r - 1)*COLS + (c + 1)] < 0)
					edge += 1;

				if (binary[(r - 1)*COLS + (c + 1)] - binary[r*COLS + (c + 1)] < 0)
					edge += 1;

				if (binary[r*COLS + c] == binary[r*COLS + (c + 1)])
				{
					neighbor += 1;
					b = 1;
				}

				if (binary[r*COLS + c] == binary[(r + 1)*COLS + (c + 1)])
					neighbor += 1;

				if (binary[r*COLS + c] == binary[(r + 1)*COLS + c])
				{
					neighbor += 1;
					e = 1;
				}

				if (binary[r*COLS + c] == binary[(r + 1)*COLS + (c - 1)])
					neighbor += 1;

				if (binary[r*COLS + c] == binary[r*COLS + (c - 1)])
				{
					neighbor += 1;
					d = 1;
				}

				if (binary[r*COLS + c] == binary[(r - 1)*COLS + (c - 1)])
					neighbor += 1;

				if (binary[r*COLS + c] == binary[(r - 1)*COLS + c])
				{
					neighbor += 1;
					a = 1;
				}


				if (binary[r*COLS + c] == binary[(r - 1)*COLS + (c + 1)])
					neighbor += 1;

				if (a != 1 || b != 1 || (e != 1 && d != 1))
				{
					pass = 1;
				}

				if (edge == 1 && neighbor >= 3 && neighbor <= 7 && pass == 1)
				{
					copy[r*COLS + c] = 100; //dummy image with random value as label for marking to delete
					flag += 1;
				}
				}

			for (r = 0; r < ROWS; r++)
				for (c = 0; c < COLS; c++)
				{
				if (copy[r*COLS + c] == 100)
				{
					binary[r*COLS + c] = 255;
				}
				}

			if ((flag - flag2) == 0)
				break;
			flag2 = flag;
		}

		if ((fpt2 = fopen("parenthood_gt.txt", "r")) == NULL)
		{
			printf("Unable to open parenthood.txt for reading\n");
			exit(0);
		}


		for(i=0;i<1262;i++)
		{

			/*Reading ground truth*/
			fscanf(fpt2, "%c %d %d\n", letter, &R, &C);
			let += 1;
			end = 0;
			branch = 0;

			/*Checking in window around ground truth locations*/

			{
				for (r = R - 9; r < R + 9; r++)
					for (c = C - 12; c < C + 12; c++)
					{
					edge = 0;
					if (r*COLS + c <= COLS*ROWS && binary[r*COLS + c] == 0)
					{
						if (binary[r*COLS + (c + 1)] - binary[(r + 1)*COLS + (c + 1)] < 0)
							edge += 1;

						if (binary[(r + 1)*COLS + (c + 1)] - binary[(r + 1)*COLS + c] < 0)
							edge += 1;

						if (binary[(r + 1)*COLS + c] - binary[(r + 1)*COLS + (c - 1)] < 0)
							edge += 1;

						if (binary[(r + 1)*COLS + (c - 1)] - binary[r*COLS + (c - 1)] < 0)
							edge += 1;

						if (binary[r*COLS + (c - 1)] - binary[(r - 1)*COLS + (c - 1)] < 0)
							edge += 1;

						if (binary[(r - 1)*COLS + (c - 1)] - binary[(r - 1)*COLS + c] < 0)
							edge += 1;

						if (binary[(r - 1)*COLS + c] - binary[(r - 1)*COLS + (c + 1)] < 0)
							edge += 1;

						if (binary[(r - 1)*COLS + (c + 1)] - binary[r*COLS + (c + 1)] < 0)
							edge += 1;

						if (edge == 1)
							end += 1;

						else if (edge > 2)
							branch += 1;
					}
					}
			}

			if (end == 1 && branch == 1)
			{
				TP += 1;
			}

			if (letter[i] == 'e')
				check += 1;
		}

		FP = count - TP;
		FN = check - TP;
		TN = let - TP - FP - FN;

		sum1 = TP + FN;
		sum2 = FP + TN;


		TPR = (float)TP / sum1; // TPR and FPR
		FPR = (float)FP / sum2;
		fprintf(fpt4, "%d %f %f\n", T, TPR, FPR);
		rewind(fpt2);


		fpt1 = fopen("thinned.ppm", "wb");
		fprintf(fpt1, "P5 %d %d 255\n", COLS, ROWS);

		for (r = 0; r < ROWS*COLS; r++)
		{
			fprintf(fpt1, "%c", binary[r]);
		}
		fclose(fpt1);
		fclose(fpt2);
}
	fclose(fpt3);
}
